<?php

/**
 * @file
 * Provides field Entity Reference Widget Tree hooks for term reference tree.
 */

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'term_reference_tree') . '/term_reference_tree.widget.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'term_reference_tree') . '/term_reference_tree.field.inc';

/**
 * Implements hook_get_entity_hierarchy().
 */
function term_reference_tree_get_entity_hierarchy($element, $allowed_ids, $label = '') {
  if ($element['#field'] == 'term_reference_tree') {
    return _term_reference_tree_get_term_hierarchy($element['#allowed_bundles']['#parent_id'], $element['#allowed_bundles']['#vocabulary'], $allowed_ids, $element['#filter_view'], $label);
  }
}

/**
 * This function returns a taxonomy term hierarchy in a nested array.
 *
 * @param int $tid
 *   The ID of the root term.
 * @param int $vid
 *   The vocabulary ID to restrict the child search.
 *
 * @return array
 *   A nested array of the term's child objects.
 */
function _term_reference_tree_get_term_hierarchy($tid, $vid, &$allowed, $filter, $label, $default = array()) {
  $terms = _term_reference_tree_get_children($tid, $vid);

  $result = array();

  if ($filter != '') {
    foreach ($allowed as $k => $v) {
      if (array_key_exists($k, $terms)) {
        $term =& $terms[$k];
        $children = _term_reference_tree_get_term_hierarchy($term->tid, $vid, $allowed, $filter, $label, $default);
        if (is_array($children)) {
          $term->children = $children;
          $term->children_selected = _term_reference_tree_children_selected($term, $default);
        }
        else {
          $term->children_selected = FALSE;
        }
        $term->TEST = $label;
        array_push($result, $term);
      }
    }
  }
  else {
    foreach ($terms as &$term) {
      if ($filter == '' || array_key_exists($term->tid, $allowed)) {
        $children = _term_reference_tree_get_term_hierarchy($term->tid, $vid, $allowed, $filter, $label, $default);
        if (is_array($children)) {
          $term->children = $children;
          $term->children_selected = _term_reference_tree_children_selected($term, $default);
        }
        else {
          $term->children_selected = FALSE;
        }
        $term->TEST = $label;
        array_push($result, $term);
      }
    }
  }

  return $result;
}

/**
 * This function is like taxonomy_get_children but doesn't load the entire term.
 *
 * @param int $tid
 *   The ID of the term whose children you want to get.
 * @param int $vid
 *   The vocabulary ID.
 *
 * @return array
 *   An array of taxonomy terms, each in the form
 *   array('tid' => $tid, 'name' => $name)
 */
function _term_reference_tree_get_children($tid, $vid) {
  // DO NOT LOAD TAXONOMY TERMS HERE
  // Taxonomy terms take a lot of time and memory to load, and this can be
  // very bad on large vocabularies.  Instead, we load the term as necessary
  // in cases where it's needed (such as using tokens or when the locale
  // module is enabled).
  $query = db_select('taxonomy_term_data', 't');
  $query->join('taxonomy_term_hierarchy', 'h', 't.tid = h.tid');
  $query->join('taxonomy_vocabulary', 'v', 'v.vid = t.vid');
  $query->fields('t', array('tid', 'name'));
  $query->addField('v', 'machine_name', 'vocabulary_machine_name');
  $query->condition('t.vid', $vid);
  $query->condition('h.parent', $tid);
  $query->addTag('term_access');
  $query->addTag('translatable');
  $query->orderBy('t.weight');
  $query->orderBy('t.name');
  $results = $query->execute();

  $terms = array();
  while ($term = $results->fetchObject()) {
    $terms[$term->tid] = $term;
  }

  return $terms;
}

/**
 * Select children.
 */
function _term_reference_tree_children_selected($terms, $default) {
  foreach ($terms->children as $term) {
    if (isset($default[$term->tid]) || $term->children_selected) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_get_entity_parent().
 */
function term_reference_tree_get_entity_parent($element, $tid) {
  $q = db_query_range("SELECT h.parent FROM {taxonomy_term_hierarchy} h WHERE h.tid = :tid", 0, 1, array(':tid' => $tid));

  $t = 0;
  foreach ($q as $term) {
    $t = $term->parent;
  }

  return $t;
}
