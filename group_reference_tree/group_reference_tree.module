<?php

/**
 * @file
 * Provides field entity_reference tree hooks for group reference tree.
 */

/**
 * Implements hook_get_entity_hierarchy().
 */
function group_reference_tree_get_entity_hierarchy($element, $allowed_ids, $label = '') {
  if ($element['#field'] == 'group_reference_tree') {
    return _group_reference_tree_get_group_hierarchy($element['#allowed_bundles']['#parent_id'], $element['#allowed_bundles']['entity_type'], $element['#allowed_bundles']['bundle_names'], $allowed_ids, $element['#filter_view'], $label);
  }
}

/**
 * This function returns a hierarchy of groups memberships in a nested array.
 *
 * @param int $parent_id
 *   The ID of the root of the Group membership hierarchy.
 * @param int $entity_type
 *   The entity type to restrict the child search.
 * @param string $bundle_names
 *   The bundle names to restrict the child search.
 *
 * @return array
 *   A nested array of the group's membership child objects.
 */
function _group_reference_tree_get_group_hierarchy($parent_id, $entity_type, $bundle_names, &$allowed, $filter, $label, $default = array()) {
  $entities = _group_reference_tree_get_children($parent_id, $entity_type, $bundle_names);
  $entity_info = entity_get_info($entity_type);

  $result = array();

  if ($filter != '') {
    foreach ($allowed as $k => $v) {
      if (array_key_exists($k, $entities)) {
        $entity =& $entities[$k];
        $children = _group_reference_tree_get_group_hierarchy($entity->{$entity_info['entity keys']['id']}, $entity_type, $bundle_names, $allowed, $filter, $label, $default);
        if (is_array($children)) {
          $entity->children = $children;
          $entity->children_selected = _group_reference_tree_children_selected($entity, $default, $entity_info['entity keys']['id']);
        }
        else {
          $entity->children_selected = FALSE;
        }
        $entity->TEST = $label;
        array_push($result, $entity);
      }
    }
  }
  elseif ($entities) {
    foreach ($entities as &$entity) {
      if ($filter == '' || array_key_exists($entity->{$entity_info['entity keys']['id']}, $allowed)) {
        $children = _group_reference_tree_get_group_hierarchy($entity->{$entity_info['entity keys']['id']}, $entity_type, $bundle_names, $allowed, $filter, $label, $default);
        if (is_array($children)) {
          $entity->children = $children;
          $entity->children_selected = _group_reference_tree_children_selected($entity, $default, $entity_info['entity keys']['id']);
        }
        else {
          $entity->children_selected = FALSE;
        }
        $entity->TEST = $label;
        array_push($result, $entity);
      }
    }
  }

  return $result;
}

/**
 * This function is like taxonomy_get_children.
 *
 * Except it doesn't load the entire group.
 *
 * @param int $parent_id
 *   The ID of the group whose children you want to get.
 * @param int $entity_type
 *   The entity type.
 * @param string $bundle_names
 *   The bundle names.
 *
 * @return array
 *   Array of groups, each in the form array('id'=>$entity_id,'name'=>$name).
 */
function _group_reference_tree_get_children($parent_id, $entity_type, $bundle_names) {
  $etids = array();

  if ($parent_id) {

    // Get all children of the parent id in group Membership table.
    $query = db_select('group_entity ', 'o');
    $query->fields('o', array('entity_id'));
    $query->addField('g', 'title');
    $query->join('groups', 'g', "g.gid= o.entity_id");
    $query->condition('o.gid', $parent_id);
    $query->condition('o.entity_type', 'group');
    $results = $query->execute();

    // Create a table of entity ids.
    while ($entity = $results->fetchObject()) {
      if ($entity->entity_id != $parent_id) {
        $etids[$entity->entity_id] = (object) array('gid' => $entity->entity_id, 'title' => $entity->title);
      }
    }
  }
  else {
    $query1 = db_select('groups', 'g')->fields('g', array('gid'));
    $query1->join('group_entity', 'o', 'o.entity_id= g.gid');
    $query1->condition('o.entity_type', $entity_type);
    if ($bundle_names) {
      $query1->condition('bundle', $bundle_names, 'IN');
    }
    $query1->where('g1.gid = g.gid');
    $query = db_select('groups', 'g1')->fields('g1', array('gid', 'title'));
    if ($bundle_names) {
      $query->condition('type', $bundle_names, 'IN');
    }
    $results = $query->notExists($query1)->execute();

    // Create a table of entity ids.
    while ($entity = $results->fetchObject()) {
      $etids[$entity->gid] = (object) array('gid' => $entity->gid, 'title' => $entity->title);
    }
  }

  return ($etids);
}

/**
 * Select children.
 */
function _group_reference_tree_children_selected($entities, $default, $id) {
  foreach ($entities->children as $entity) {
    if (isset($default[$entity->$id]) || $entity->children_selected) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_get_entity_parent().
 */
function group_reference_tree_get_entity_parent($element, $parent_id) {
  if (!$parent_id) {
    return;
  }
  $query = db_select('group_entity ', 'o');
  $query->fields('o', array('gid'));
  $query->condition('o.etid', $parent_id);
  $query->condition('o.entity_type', $element['#display']['settings']['target_entity']);
  $results = $query->execute();

  // Create a table of entity ids.
  $etids = array();
  while ($entity = $results->fetchObject()) {
    if ($entity->gid != $parent_id) {
      $etids[] = $entity->gid;
    }
  }

  return $etids;
}
