<?php

/**
 * Implements hook_element_info().
 */
function entity_reference_tree_element_info() {
  $types = array(
    'checkbox_tree' => array(
      '#input' => true,
      '#process' => array('entity_reference_tree_process_checkbox_tree'),
      '#theme' => array('checkbox_tree'),
      '#pre_render' => array('form_pre_render_conditional_form_element'),
    ),
    'checkbox_tree_level' => array(
      '#input' => false,
      '#theme' => array('checkbox_tree_level'),
      '#pre_render' => array('form_pre_render_conditional_form_element'),
    ),
    'checkbox_tree_item' => array(
      '#input' => false,
      '#theme' => array('checkbox_tree_item'),
      '#pre_render' => array('form_pre_render_conditional_form_element'),
    ),
    'checkbox_tree_label' => array(
      '#input' => false,
      '#theme' => array('checkbox_tree_label'),
      '#pre_render' => array('form_pre_render_conditional_form_element'),
    ),
    'checkbox_tree_track_list' => array(
      '#input' => false,
      '#theme' => array('checkbox_tree_track_list'),
      '#pre_render' => array('form_pre_render_conditional_form_element'),
    ),
  );
  
  return $types;
}


/**
 * Implements hook_theme().
 */
function entity_reference_tree_theme() {
  return array(
    'checkbox_tree' => array(
      'render element' => 'element',
    ),
    'checkbox_tree_level' => array(
      'render element' => 'element',
    ),
    'checkbox_tree_item' => array(
      'render element' => 'element',
    ),
    'checkbox_tree_label' => array(
      'render element' => 'element',
    ),
    'checkbox_tree_track_list' => array(
      'render element' => 'element',
    ),
  );
}


/**
 * Recursively go through the option tree and return a flat array of
 * options
 */
function _entity_reference_tree_flatten($element, &$form_state) {
  $output = array();
  $children = element_children($element);
  foreach ($children as $c) {
    $child = $element[$c];
    if (array_key_exists('#type', $child) && ($child['#type'] == 'radio' || $child['#type'] == 'checkbox')) {
      $output[] = $child;
    }
    else {
      $output = array_merge($output, _entity_reference_tree_flatten($child, $form_state));
    }
  }
  return $output;
}


/**
 * Return an array of options.
 * 
 * This function converts a list of entities to a key/value list of options.
 * 
 * @param $entities
 *   An array of entity IDs.
 * @param $allowed
 *   An array containing the entities allowed by the filter view
 * @param $filter
 *   A string defining the view to filter by (only used to detect whether view
 *   filtering is enabled
 * 
 * @return
 *   A key/value array of entities (name => id)
 */
function _entity_reference_tree_get_options(&$entities, &$allowed, $filter, $id, $name) {
  $options = array();

  if (is_array($entities) && count($entities) > 0) {
    foreach ($entities as $entity) {
      if (!$filter || (is_array($allowed) && isset($allowed[$entity->{$id}]))) {
        $options[$entity->{$id}] = $entity->{$name};
        $options += _entity_reference_tree_get_options($entity->children, $allowed, $filter, $id, $name);
      }
    }
  }
  return $options;
}


/**
 * Makes sure that cardinality is unlimited if auto-select parents is enabled.
 */
function _entity_reference_tree_select_parents_validate($element, &$form_state) {
  if ($form_state['values']['instance']['widget']['settings']['select_parents'] == 1 && $form_state['values']['field']['cardinality'] != -1) {
    // This is pretty wonky syntax for the field name in form_set_error, but it's
    // correct.
    form_set_error('field][cardinality', t('You must select an Unlimited number of values if Select Parents Automatically is enabled.'));
  }
}


/**
 * Makes sure that cardinality is unlimited if cascading selection is enabled.
 */
function _entity_reference_tree_cascading_selection_validate($element, &$form_state) {
  if ($form_state['values']['instance']['widget']['settings']['cascading_selection'] == 1 && $form_state['values']['field']['cardinality'] != -1) {
    // This is pretty wonky syntax for the field name in form_set_error, but it's
    // correct.
    form_set_error('field][cardinality', t('You must select an Unlimited number of values if Cascading selection is enabled.'));
  }
}


/**
 * Process the checkbox_tree widget.
 * 
 * This function processes the checkbox_tree widget.
 * 
 * @param $element
 *   The element to be drawn.$element['#field_name']
 * @param $form_state
 *   The form state.
 * 
 * @return
 *   The processed element.
 */
function entity_reference_tree_process_checkbox_tree($element, $form_state) {
  if (is_array($form_state)) {
    if (!empty($element['#max_choices']) && $element['#max_choices'] != '-1') {
      drupal_add_js(array('entity_reference_tree' => array('trees' => array($element['#id'] => array('max_choices' => $element['#max_choices'])))), 'setting');
    }
    
    $hide_ids = array();

    if ($element['#filter_view'] != '') {
      $hide_ids += _entity_reference_tree_get_allowed_values($element);
    }
    
    if (empty($element['#options'])) {
      $element['#options_tree'] = module_invoke_all('get_entity_hierarchy', $element, $hide_ids);
      
      $required = $element['#required'];
      if ($element['#max_choices'] == 1 && !$required) {
        array_unshift($element['#options_tree'], (object) array(
          $element['#target_id'] => '',
          'name' => 'N/A',
          'depth' => 0
          )
        );
      }
      $element['#options'] = _entity_reference_tree_get_options($element['#options_tree'], $hide_ids, $element['#filter_view'], $element['#target_id'], $element['#target_name']);
    }

    $value = !empty($element['#default_value']) ? $element['#default_value'] : array();
    $entities = !empty($element['#options_tree']) ? $element['#options_tree'] : array();
    $max_choices = !empty($element['#max_choices']) ? $element['#max_choices'] : 1;
    if (array_key_exists('#select_parents', $element) && $element['#select_parents']) {
      $element['#attributes']['class'][] = 'select-parents';
    }

    if ($max_choices != 1) {
      $element['#tree'] = TRUE;
    }

    $tree = new stdClass;
    $tree->children = $entities;
    $element[] = _entity_reference_tree_build_level($element, $tree, $form_state, $value, $max_choices, array(), 1);

    //Add a track list element?
    $track_list = !empty($element['#track_list']) && $element['#track_list'];
    if ( $track_list ) {
      $element[] = array(
        '#type' => 'checkbox_tree_track_list',
        '#max_choices' => $max_choices,
      );
    }
  } 

  return $element;
}


/**
 * Returns HTML for a checkbox_tree form element.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *
 * @ingroup themeable
 */
function theme_checkbox_tree($variables) {
  $element = $variables['element'];
  $element['#children'] = drupal_render_children($element);
  
  $attributes = array();
  if (isset($element['#id'])) {
    $attributes['id'] = $element['#id'];
  }
  $attributes['class'][] = 'entity-reference-tree';
  
  if (form_get_error($element)) {
    $attributes['class'][] = 'error';
  }
  
  if (!empty($element['#required'])) {
    $attributes['class'][] = 'required';
  }

  if (array_key_exists('#start_minimized', $element) && $element['#start_minimized']) {
    $attributes['class'][] = "entity-reference-tree-start-minimized";
  }

  if (array_key_exists('#cascading_selection', $element) && $element['#cascading_selection']) {
    $attributes['class'][] = "entity-reference-tree-cascading-selection";
  }

  $add_track_list = FALSE;
  if (array_key_exists('#track_list', $element) && $element['#track_list']) {
    $attributes['class'][] = "entity-reference-tree-track-list-shown";
    $add_track_list = TRUE;
  }

  if (!empty($element['#attributes']['class'])) {
    $attributes['class'] = array_merge($attributes['class'], $element['#attributes']['class']);
  }
  return 
      '<div' . drupal_attributes($attributes) . '>' 
    . (!empty($element['#children']) ? $element['#children'] : '') 
    . '</div>';
}


/**
 * This function prints a list item with a checkbox and an unordered list
 * of all the elements inside it.
 */
function theme_checkbox_tree_level($variables) {
  $element = $variables['element'];
  $sm = '';
  if (array_key_exists('#level_start_minimized', $element) && $element['#level_start_minimized']) {
    $collapsed = 
    $sm = " style='display: none;'";
  }

  $max_choices = 0;
  if (array_key_exists('#max_choices', $element)) {
    $max_choices = $element['#max_choices'];
  }

  $output = "<ul class='entity-reference-tree-level '$sm>";
  $children = element_children($element);
  foreach($children as $child) {
    $output .= "<li>";
    $output .= drupal_render($element[$child]);
    $output .= "</li>";
  }

  $output .= "</ul>";

  return $output;
}


/**
 * This function prints a single item in the tree, followed by that item's children
 * (which may be another checkbox_tree_level).
 */
function theme_checkbox_tree_item($variables) {
  $element = $variables['element'];
  $children = element_children($element);
  $output = "";
  
  $sm = $element['#level_start_minimized'] ? ' entity-reference-tree-collapsed' : '';
  
  if (is_array($children) && count($children) > 1) {
    $output .= "<div class='entity-reference-tree-button$sm'></div>";
  }
  elseif (!$element['#leaves_only']) {
    $output .= "<div class='no-entity-reference-tree-button'></div>";
  }

  foreach($children as $child) {
    $output .= drupal_render($element[$child]);
  }
  
  return $output;
}


/**
 * This function prints a label that cannot be selected.
 */
function theme_checkbox_tree_label($variables) {
  $element = $variables['element'];
  $output = "<div class='parent-entity'>" . $element['#value'] . "</div>";
  return $output;
}


/**
 * Shows a list of items that have been checked.
 * The display happens on the client-side.
 * Use this function to theme the element's label,
 * and the "nothing selected" message.
 * 
 * @param $variables Variables available for theming. 
 */
function theme_checkbox_tree_track_list($variables) {
  //Should the label be singular or plural? Depends on cardinality of entity field.
  static $nothingselected;
  
  if(!$nothingselected) {
    $nothingselected = t('[Nothing selected]');
    //Add the "Nothing selected" text. To style it, replace it with whatever you want.
    //Could do this with a file instead.
    drupal_add_js(
      'var entityReferenceTreeNothingSelectedText = "' . $nothingselected . '";',
      'inline'
    );
  }
  
  $label = format_plural(
      $variables['element']['#max_choices'], 
      'Selected item (click the item to uncheck it)',
      'Selected items (click an item to uncheck it)'
  );
  $output = 
    '<div class="entity-reference-track-list-container">
       <div class="entity-reference-track-list-label">' . $label . '</div>
       <ul class="entity-reference-tree-track-list"><li class="entity_ref_tree_nothing_message">'.$nothingselected.'</li></ul>
     </div>';
     

  return $output;
}


/**
 * Validates the entity reference tree widgets.
 * 
 * This function sets the value of the tree widgets into a form that Drupal
 * can understand, and also checks if the field is required and has been
 * left empty.
 * 
 * @param $element
 *   The element to be validated.
 * @param $form_state
 *   The state of the form.
 * 
 * @return
 *   The validated element.
 */
function _entity_reference_tree_widget_validate(&$element, &$form_state) {
  $items = _entity_reference_tree_flatten($element, $form_state);
  $value = array();

  if ($element['#max_choices'] != 1) {
    foreach ($items as $child) {
      if (array_key_exists('#value', $child) && $child['#value'] !== 0) {
        array_push($value, array($element['#value_key'] => $child['#value']));

        // If the element is leaves only and select parents is on, then automatically
        // add all the parents of each selected value.
        if ($element['#select_parents'] && $element['#leaves_only']) {
          foreach ($child['#parent_values'] as $parent_id) {
            if (!in_array(array($element['#value_key'] => $parent_id), $value)) {
              array_push($value, array($element['#value_key'] => $parent_id));
            }
          }
        }
      } 
    }
  }
  else {
    // If it's a tree of radio buttons, they all have the same value, so we can just
    // grab the value of the first one.
    if (count($items) > 0) {
      $child = reset($items);
      if (array_key_exists('#value', $child) && $child['#value'] !== 0) {
        array_push($value, array($element['#value_key'] => $child['#value']));
      }       
    }
  }
  
  if ($element['#required'] && count($value) == 0) {
    form_error($element, check_plain(t('!name field is required.', array('!name' => $element['#title']))));
  }

  form_set_value($element, $value, $form_state);
  return $element;
}


/**
 * Returns an array of allowed values defined by the given view.
 * (Works only for Taxonomy Views)
 *
 * @param $filter
 *   A view, in the format VIEWNAME:DISPLAYNAME
 *
 * @return
 *   An array of entity IDs (tid => true) returned by the view.
 */
function _entity_reference_tree_get_allowed_values($element) {
  $filter = $element['#filter_view'];
  $arg_type = $element['#filter_view_arg_type'];
  $arg_value = $element['#filter_view_arg_key'];
  $id = $element['#target_id'];
  $viewname = "";
  $displayname = "";
  $args = "";
  $allowed = array();
  
  // Get the arguments for the view
  if ($arg_type == 1 && is_numeric($arg_value)) $args = arg($arg_value);
  if ($arg_type == 2 && $arg_value<>'' && isset($_REQUEST[$arg_value])) {
    if (is_array($_REQUEST[$arg_value])) {
      foreach ($_REQUEST[$arg_value] as $k => $arg) {
        $args .= $arg;
        if ($k < count($arg)-1) $args .= ',';
      }
    }
    else {
      $args = $_REQUEST[$arg_value];
    }
  }

  if (module_exists('views') && $filter != '') {
    list($viewname, $displayname) = explode(":", $filter);
    $view = views_get_view($viewname);
    if (is_object($view)) {
      if ($view->access($displayname)) {
        $title = drupal_get_title();
        $view->execute_display($displayname, $args);
        $title = drupal_set_title($title, PASS_THROUGH);
        foreach ($view->result as $item) {
          $allowed[$item->{$id}] = TRUE;
        }
      }
      else {
        drupal_set_message(check_plain(t("Cannot access view for entity reference tree widget.")), 'warning');
      }
    }
    else {
      drupal_set_message(check_plain(t("Entity reference tree: no view named '@viewname'", array('@viewname' => $viewname))), 'warning');
    }
  }

  return $allowed;
}


/**
 * Builds a single item in the entity reference tree widget.
 *
 * This function returns an element with a checkbox for a single entity.
 * If that entity has children, it appends checkbox_tree_level element that
 * contains the children.  It is meant to be called recursively when the widget
 * is built.
 *
 * @param $element
 *   The main checkbox_tree element.
 * @param $entity
 *   A entity object.  $entity->children should be an array of the entity
 *   objects that are that entity's children.
 * @param $form_state
 *   The form state.
 * @param $value
 *   The value of the element.
 * @param $max_choices
 *   The maximum number of allowed selections.
 *
 * @return
 *   A completed checkbox_tree_item element, which contains a checkbox and
 *   possibly a checkbox_tree_level element as well.
 */
function _entity_reference_tree_build_item(&$element, &$entity, &$form_state, &$value, $max_choices, $parent_ids, $parent, $depth) {
  $start_minimized = FALSE;
  if (array_key_exists('#start_minimized', $element)) {
    $start_minimized = $element['#start_minimized'];
  }

  $leaves_only = FALSE;
  if (array_key_exists('#leaves_only', $element)) {
    $leaves_only = $element['#leaves_only'];
  }

  $entity_name = $entity->{$element['#target_name']};

  $container = array(
    '#type' => 'checkbox_tree_item',
    '#max_choices' => $max_choices,
    '#leaves_only' => $leaves_only,
    '#entity_name' => $entity_name,
    '#level_start_minimized' => FALSE,
    '#depth' => $depth,
  );

  if (!$element['#leaves_only'] || count($entity->children) == 0) {
    $name = "edit-" . str_replace('_', '-', $element['#field_name']);
    if (!$element['#allowed_ids'] || in_array($entity->{$element['#target_id']}, $element['#allowed_ids'])) {
      $e = array(
        '#type' => ($max_choices == 1) ? 'radio' : 'checkbox',
        '#title' => $entity_name,
        '#on_value' => $entity->{$element['#target_id']},
        '#off_value' => 0,
        '#return_value' => $entity->{$element['#target_id']},
        '#parent_values' => $parent_ids,
        '#default_value' => isset($value[$entity->{$element['#target_id']}]) ? $entity->{$element['#target_id']} : NULL,
        '#attributes' => isset($element['#attributes']) ? $element['#attributes'] : NULL,
        '#ajax' => isset($element['#ajax']) ? $element['#ajax'] : NULL,
      );
    }
    else {
      $e = array(
        '#type' => 'markup',
        '#suffix' => $entity_name,
      );
    }

    if ($element['#token_display'] != '' && module_exists('token')) {
      $ent = entity_load($entity->type, $entity->{$element['#target_id']});
      $e['#title'] = token_replace($element['#token_display'], array('entity' => $ent), array('clear' => TRUE));
    }

    if ($e['#type'] == 'radio') {
      $parents_for_id = array_merge($element['#parents'], array($entity->{$element['#target_id']}));
      $e['#id'] = drupal_html_id('edit-' . implode('-', $parents_for_id));
      $e['#parents'] = $element['#parents'];
    }
  }
  else {
    $e = array(
      '#type' => 'checkbox_tree_label',
      '#value' => $entity->name,
    );
  }

  $container[$entity->{$element['#target_id']}] = $e;

  if (($depth + 1 <= $element['#max_depth'] || !$element['#max_depth']) && property_exists($entity, 'children') && count($entity->children) > 0) {
    $parents = $parent_ids;
    $parents[] = $entity->{$element['#target_id']};
    $container[$entity->{$element['#target_id']} . '-children'] = _entity_reference_tree_build_level($element, $entity, $form_state, $value, $max_choices, $parents, $depth+1);
    $container['#level_start_minimized'] = $container[$entity->{$element['#target_id']} . '-children']['#level_start_minimized'];
  }
  
  return $container;
}


/**
 * Builds a level in the entity reference tree widget.
 *
 * This function returns an element that has a number of checkbox_tree_item elements
 * as children.  It is meant to be called recursively when the widget is built.
 *
 * @param $element
 *   The main checkbox_tree element.
 * @param $entity
 *   A entity list object.  $entity->children should be an array of the entity
 *   objects that are that entity's children.
 * @param $form_state
 *   The form state.
 * @param $value
 *   The value of the element.
 * @param $max_choices
 *   The maximum number of allowed selections.
 *
 * @return
 *   A completed checkbox_tree_level element.
 */
function _entity_reference_tree_build_level(&$element, &$entity, &$form_state, &$value, $max_choices, $parent_ids, $depth) {
  $start_minimized = FALSE;
  if (array_key_exists('#start_minimized', $element)) {
    $start_minimized = $element['#start_minimized'];
  }

  $leaves_only = FALSE;
  if (array_key_exists('#leaves_only', $element)) {
    $leaves_only = $element['#leaves_only'];
  }
  
  $container = array(
    '#type' => 'checkbox_tree_level',
    '#max_choices' => $max_choices,
    '#leaves_only' => $leaves_only,
    '#start_minimized' => $start_minimized,
    '#depth' => $depth,
  );

  $container['#level_start_minimized'] = $depth > 1 && $element['#start_minimized'] && !($entity->children_selected);

  foreach ($entity->children as $e) {
    $container[$e->{$element['#target_id']}] = _entity_reference_tree_build_item($element, $e, $form_state, $value, $max_choices, $parent_ids, $container, $depth);
  }
  
  return $container;
}
