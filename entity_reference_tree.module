<?php

module_load_include('inc', 'entity_reference_tree', 'entity_reference_tree.widget');

/**
 * Implements hook_element_info().
 */
function entity_reference_tree_element_info() {
  $types = array(
    'checkbox_tree' => array(
      '#input' => TRUE,
      '#process' => array('entity_reference_tree_process_checkbox_tree'),
      '#theme' => array('checkbox_tree'),
      '#pre_render' => array('form_pre_render_conditional_form_element'),
    ),
    'checkbox_tree_level' => array(
      '#input' => FALSE,
      '#theme' => array('checkbox_tree_level'),
      '#pre_render' => array('form_pre_render_conditional_form_element'),
    ),
    'checkbox_tree_item' => array(
      '#input' => FALSE,
      '#theme' => array('checkbox_tree_item'),
      '#pre_render' => array('form_pre_render_conditional_form_element'),
    ),
    'checkbox_tree_label' => array(
      '#input' => FALSE,
      '#theme' => array('checkbox_tree_label'),
      '#pre_render' => array('form_pre_render_conditional_form_element'),
    ),
    'checkbox_tree_track_list' => array(
      '#input' => FALSE,
      '#theme' => array('checkbox_tree_track_list'),
      '#pre_render' => array('form_pre_render_conditional_form_element'),
    ),
  );

  return $types;
}

/**
 * Implements hook_theme().
 */
function entity_reference_tree_theme() {
  return array(
    'checkbox_tree' => array(
      'render element' => 'element',
    ),
    'checkbox_tree_level' => array(
      'render element' => 'element',
    ),
    'checkbox_tree_item' => array(
      'render element' => 'element',
    ),
    'checkbox_tree_label' => array(
      'render element' => 'element',
    ),
    'checkbox_tree_track_list' => array(
      'render element' => 'element',
    ),
    'entity_reference_tree_list' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Recursively go through the option tree and return a flat array of options.
 */
function _entity_reference_tree_flatten($element, &$form_state) {
  $output = array();
  $children = element_children($element);
  foreach ($children as $c) {
    $child = $element[$c];
    if (array_key_exists('#type', $child) && ($child['#type'] == 'radio' || $child['#type'] == 'checkbox')) {
      $output[] = $child;
    }
    else {
      $output = array_merge($output, _entity_reference_tree_flatten($child, $form_state));
    }
  }
  return $output;
}

/**
 * Return an array of options.
 *
 * This function converts a list of entities to a key/value list of options.
 *
 * @param $entities
 *   An array of entities IDs.
 * @param $allowed
 *   An array containing the entities allowed by the filter view
 * @param $filter
 *   A string defining the view to filter by (only used to detect whether view
 *   filtering is enabled
 *
 * @return
 *   A key/value array of entities (name => id)
 */
function _entity_reference_tree_get_options(&$entities, &$allowed, $filter, $id, $name) {
  $options = array();

  if (is_array($entities) && count($entities) > 0) {
    foreach ($entities as $entity) {
      if (!$filter || (is_array($allowed) && isset($allowed[$entity->{$id}]))) {
        $options[$entity->{$id}] = $entity->{$name};
        $options += _entity_reference_tree_get_options($entity->children, $allowed, $filter, $id, $name);
      }
    }
  }
  return $options;
}
