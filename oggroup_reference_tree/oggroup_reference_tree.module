<?php

module_load_include('inc', 'oggroup_reference_tree', 'oggroup_reference_tree.field');
module_load_include('inc', 'oggroup_reference_tree', 'oggroup_reference_tree.widget');


/**
 * Implements hook_theme().
 */
function oggroup_reference_tree_theme() {
  return array(
    'oggroup_tree_list' => array(
      'render element' => 'element',
    ),
  );
}


/**
 * Implements hook_get_entity_hierarchy().
 */
function oggroup_reference_tree_get_entity_hierarchy($element, $allowed_ids, $label = '') {
  if ($element['#field'] == 'oggroup_reference_tree') {
    $tree = array();
    foreach ($element['#allowed_bundles'] as $item) {
      $tree += og_tree_views_get_hierarchy($item['entity_type'], $item['parent_id'], array('nested' => TRUE, 'entities_allowed' => array($item['entity_type']), 'bundles_allowed' => array($item['bundle_name']), 'ids_allowed' => $allowed_ids));                                          
    }
    return $tree;
  }  
}


function _oggroup_reference_tree_get_parent($gid) {
  $q = db_select('field_data_group_audience', 'h');
  $q->innerJoin('og', 'og', 'og.etid = h.entity_id AND og.entity_type = h.entity_type');
  $q->condition('og.gid', $gid);
  $q->addField('h', 'group_audience_gid');
  $groups = $q->execute()->fetchAll();

  $g = 0;
  foreach ($groups as $group) {
    $g = $group->group_audience_gid;
  }

  return $g;
}


/**
 * Themes the OG group tree display (as opposed to the select widget).
 */
function theme_oggroup_tree_list($variables) {
  $element =& $variables['element'];
  $data =& $element['#data'];

  $tree = array();

  # For each selected group:
  foreach($data as $item) {
    # Loop if the group ID is not zero:
    $values = array();
    $gid = $item['gid'];
    $original_gid = $gid;
    while($gid != 0) {
      # Unshift the group onto an array
      array_unshift($values, $gid);
      
      # Repeat with parent group
      $gid = _oggroup_reference_tree_get_parent($gid);
    }
    
    $current =& $tree;
    # For each group in the above array:
    foreach($values as $gid) {
      # current[children][group_id] = new array
      if (!isset($current['children'][$gid])) {
        $current['children'][$gid] = array('selected' => FALSE);
      }
      
      # If this is the last value in the array, tree[children][group_id][selected] = true
      if ($gid == $original_gid) {
        $current['children'][$gid]['selected'] = TRUE;
      }

      $current['children'][$gid]['gid'] = $gid;
      $current =& $current['children'][$gid];
    }
  }
  
  $output = "<div class='entity-tree-list'>";
  $output .= _oggroup_reference_tree_output_list_level($element, $tree);
  $output .= "</div>";
  return $output;
}


/**
 * Helper function to output a single level of the term reference tree
 * display.
 */
function _oggroup_reference_tree_output_list_level(&$element, &$tree) {
  if (isset($tree['children']) && is_array($tree['children']) && count($tree['children'] > 0)) {
    $output = '<ul class="entity">';
    $settings = $element['#display']['settings'];
    $tokens_selected = $settings['token_display_selected'];
    $tokens_unselected = ($settings['token_display_unselected'] != '') ? $settings['token_display_unselected'] : $tokens_selected;

    $taxonomy_term_info = entity_get_info('taxonomy_term');
    foreach($tree['children'] as &$item) {
      $group = og_load($item['gid']);
      $info = entity_get_info($group->entity_type);
      $group_entity = og_load_entity_from_group($item['gid']);
      $uri = entity_uri($group->entity_type, $group_entity);      
      $uri['options']['html'] = TRUE;
      $class = $item['selected'] ? 'selected' : 'unselected';
      $output .= "<li class='$class'>";
      $output .= l($group_entity->{$info['entity keys']['label']}, $uri['path'], array('html' => TRUE));    
      if (isset($item['children'])) {
        $output .= _oggroup_reference_tree_output_list_level($element, $item);
      }
      $output .= "</li>";
    }

    $output .= '</ul>';
    return $output;
  }
}

