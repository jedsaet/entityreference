<?php

module_load_include('inc', 'entityreference_term_tree', 'entityreference_term_tree.field');
module_load_include('inc', 'entityreference_term_tree', 'entityreference_term_tree.widget');


/**
 * Implements hook_theme().
 */
function entityreference_term_tree_theme() {
  return array(
    'entityreference_term_tree_list' => array(
      'render element' => 'element',
    ),
  );
}


/**
 * Implements hook_get_entity_hierarchy().
 */
function entityreference_term_tree_get_entity_hierarchy($element, $allowed_ids, $label = '') {
  if ($element['#field'] == 'entityreference_term_tree') {
    return _entityreference_term_tree_get_term_hierarchy($element['#allowed_bundles']['#parent_id'], $element['#allowed_bundles']['#vocabulary'], $allowed_ids, $element['#filter_view'], $label);
  }
}


function _entityreference_term_tree_get_term_hierarchy($target_id, $vid, &$allowed, $filter, $label, $default = array()) {
  $terms = _entityreference_term_tree_get_children($target_id, $vid, $default);
  
  $result = array();

  if ($filter != '') {
    foreach($allowed as $k => $v) {
      if (array_key_exists($k, $terms)) {
        $term =& $terms[$k];
        $children = _entityreference_term_tree_get_term_hierarchy($term->target_id, $vid, $allowed, $filter, $label, $default);
        if (is_array($children)) {
          $term->children = $children;
          $term->children_selected = _entityreference_term_tree_children_selected($term, $default); 
        } 
        else {
          $term->children_selected = FALSE;
        }
        $term->TEST = $label;
        array_push($result, $term);
      }      
    }
  }
  else {
    foreach($terms as &$term) {
      if ($filter == '' || array_key_exists($term->target_id, $allowed)) {
        $children = _entityreference_term_tree_get_term_hierarchy($term->target_id, $vid, $allowed, $filter, $label, $default);
        if (is_array($children)) {
          $term->children = $children;
          $term->children_selected = _entityreference_term_tree_children_selected($term, $default);        
        } 
        else {
          $term->children_selected = FALSE;
        }
        $term->TEST = $label;
        array_push($result, $term);
      }
    }
  }
  
  return $result;
}

/**
 * This function is like taxonomy_get_children, except it doesn't load the entire term.
 *
 * @param $tid
 *   The ID of the term whose children you want to get.
 * @param $vid
 *   The vocabulary ID.
 *
 * @return
 *   An array of taxonomy terms, each in the form array('tid' => $tid, 'name' => $name)
 */
function _entityreference_term_tree_get_children($tid, $vid) {
  // DO NOT LOAD TAXONOMY TERMS HERE
  // Taxonomy terms take a lot of time and memory to load, and this can be
  // very bad on large vocabularies.  Instead, we load the term as necessary
  // in cases where it's needed (such as using tokens or when the locale
  // module is enabled).
  $select = db_select('taxonomy_term_data', 'd');
  $select->join('taxonomy_term_hierarchy', 'h', 'd.tid = h.tid');
  $result = $select->fields('d', array('tid', 'name'))
    ->condition('d.vid', $vid, '=')
    ->condition('h.parent', $tid, '=')
    ->orderBy('weight')
    ->orderBy('name')
    ->orderBy('tid')
    ->execute();

  $terms = array();
  while($term = $result->fetchObject()) {
    $term->target_id = $term->tid;
    unset($term->tid);
    $terms[$term->target_id] = (object) $term;
  }

  return $terms;
}


function _entityreference_term_tree_children_selected($terms, $default) {
  foreach($terms->children as $term) {
    if(isset($default[$term->target_id]) || $term->children_selected) {
      return true;
    }
  }
  return false;
}


function _entityreference_term_tree_get_parent($tid) {
  $q = db_query_range("select h.parent from {taxonomy_term_hierarchy} h where h.tid = :tid", 0, 1, array(':tid'  => $tid));

  $t = 0;
  foreach($q as $term) {
    $t = $term->parent;
  }

  return $t;
}


/**
 * Themes the entity reference term tree display (as opposed to the select widget).
 */
function theme_entityreference_term_tree_list($variables) {
  $element =& $variables['element'];
  $data =& $element['#data'];

  $tree = array();

  # For each selected term:
  foreach($data as $item) {
    # Loop if the term ID is not zero:
    $values = array();
    $target_id = $item['target_id'];
    $original_target_id = $target_id;
    while($target_id != 0) {
      # Unshift the term onto an array
      array_unshift($values, $target_id);
      
      # Repeat with parent term
      $target_id = _entityreference_term_tree_get_parent($target_id);
    }
    
    $current =& $tree;
    # For each term in the above array:
    foreach($values as $target_id) {
      # current[children][term_id] = new array
      if (!isset($current['children'][$target_id])) {
        $current['children'][$target_id] = array('selected' => FALSE);
      }
      
      # If this is the last value in the array, tree[children][term_id][selected] = true
      if ($target_id == $original_target_id) {
        $current['children'][$target_id]['selected'] = TRUE;
      }

      $current['children'][$target_id]['target_id'] = $target_id;
      $current =& $current['children'][$target_id];
    }
  }
  
  $output = "<div class='entity-tree-list'>";
  $output .= _entityreference_term_tree_output_list_level($element, $tree);
  $output .= "</div>";
  return $output;
}


/**
 * Helper function to output a single level of the term reference tree
 * display.
 */
function _entityreference_term_tree_output_list_level(&$element, &$tree) {
  if (isset($tree['children']) && is_array($tree['children']) && count($tree['children'] > 0)) {
    $output = '<ul class="entity">';
    $settings = $element['#display']['settings'];
    $tokens_selected = $settings['token_display_selected'];
    $tokens_unselected = ($settings['token_display_unselected'] != '') ? $settings['token_display_unselected'] : $tokens_selected;

    $taxonomy_term_info = entity_get_info('taxonomy_term');
    foreach($tree['children'] as &$item) {
      $term = $taxonomy_term_info['load hook']($item['target_id']);
      $uri = $taxonomy_term_info['uri callback']($term);
      $uri['options']['html'] = TRUE;
      $class = $item['selected'] ? 'selected' : 'unselected';
      $output .= "<li class='$class'>";
      if ($tokens_selected != '' && module_exists('token')) {
        $replace = $item['selected'] ? $tokens_selected : $tokens_unselected;
        $output .= token_replace($replace, array('term' => $term), array('clear' => TRUE));
      }
      else {
        $output .= l(entity_label('taxonomy_term', $term), $uri['path'], $uri['options']);
      }
      if (isset($item['children'])) {
        $output .= _entityreference_term_tree_output_list_level($element, $item);
      }
      $output .= "</li>";
    }

    $output .= '</ul>';
    return $output;
  }
}

